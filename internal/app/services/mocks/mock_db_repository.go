// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlesnik/url_shortener/internal/app/services (interfaces: DBRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/stlesnik/url_shortener/internal/app/models"
	repository "github.com/stlesnik/url_shortener/internal/app/repository"
)

// MockDBRepository is a mock of DBRepository interface.
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository.
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance.
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBRepository)(nil).Close))
}

// DeleteURLList mocks base method.
func (m *MockDBRepository) DeleteURLList(arg0 []interface{}, arg1 []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLList", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteURLList indicates an expected call of DeleteURLList.
func (mr *MockDBRepositoryMockRecorder) DeleteURLList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLList", reflect.TypeOf((*MockDBRepository)(nil).DeleteURLList), arg0, arg1)
}

// GetURL mocks base method.
func (m *MockDBRepository) GetURL(arg0 context.Context, arg1 string) (models.GetURLDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", arg0, arg1)
	ret0, _ := ret[0].(models.GetURLDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockDBRepositoryMockRecorder) GetURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockDBRepository)(nil).GetURL), arg0, arg1)
}

// GetURLList mocks base method.
func (m *MockDBRepository) GetURLList(arg0 context.Context, arg1 string) ([]models.BaseURLDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLList", arg0, arg1)
	ret0, _ := ret[0].([]models.BaseURLDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLList indicates an expected call of GetURLList.
func (mr *MockDBRepositoryMockRecorder) GetURLList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLList", reflect.TypeOf((*MockDBRepository)(nil).GetURLList), arg0, arg1)
}

// Ping mocks base method.
func (m *MockDBRepository) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBRepositoryMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBRepository)(nil).Ping), arg0)
}

// SaveBatchURL mocks base method.
func (m *MockDBRepository) SaveBatchURL(arg0 context.Context, arg1 []repository.URLPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatchURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatchURL indicates an expected call of SaveBatchURL.
func (mr *MockDBRepositoryMockRecorder) SaveBatchURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatchURL", reflect.TypeOf((*MockDBRepository)(nil).SaveBatchURL), arg0, arg1)
}

// SaveURL mocks base method.
func (m *MockDBRepository) SaveURL(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockDBRepositoryMockRecorder) SaveURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockDBRepository)(nil).SaveURL), arg0, arg1, arg2, arg3)
}
